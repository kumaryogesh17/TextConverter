{"version":3,"sources":["components/About.js","components/Navbar.js","components/TextForm.js","App.js","reportWebVitals.js","index.js"],"names":["About","useState","color","backgroundColor","mystyle","setmystyle","btnText","setbtnText","className","style","id","type","onClick","Navbar","props","mode","to","title","changeTheme","htmlFor","TextForm","text","setText","heading","value","onChange","event","target","rows","newText","toUpperCase","toLowerCase","document","getElementById","select","navigator","clipboard","writeText","replace","split","filter","element","length","App","setmode","body","exact","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.1ec5bf0f.chunk.js","sourcesContent":["import React, { useState } from 'react'\r\n\r\nexport default function About() {\r\n    const [mystyle, setmystyle] = useState({\r\n        color: '#0d1623',\r\n        backgroundColor: 'white'\r\n    })\r\n\r\n    const [btnText, setbtnText] = useState(\"Enable Dark Mode\")\r\n\r\n    const changeStyle = () => {\r\n        if (mystyle.color === 'white') {\r\n            setmystyle({\r\n                color: '#0d1623',\r\n                backgroundColor: 'white'\r\n\r\n            })\r\n            setbtnText(\"Enable Dark Mode\")\r\n        }\r\n\r\n        else {\r\n            setmystyle({\r\n                color: 'white',\r\n                backgroundColor: '#0d1623'\r\n            })\r\n            setbtnText(\"Enable Light Mode\")\r\n        }\r\n    }\r\n\r\n\r\n    return (\r\n        <>\r\n            <div className=\"conainer\" style={mystyle}>\r\n                <div className=\"accordion\" id=\"accordionExample\" style={mystyle} >\r\n                    <div className=\"accordion-item\" style={mystyle}>\r\n                        <h2 className=\"accordion-header\" id=\"headingOne\">\r\n                            <button className=\"accordion-button\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseOne\" aria-expanded=\"true\" aria-controls=\"collapseOne\">\r\n                                Accordion Item #1\r\n                            </button>\r\n                        </h2>\r\n                        <div id=\"collapseOne\" className=\"accordion-collapse collapse show\" aria-labelledby=\"headingOne\" data-bs-parent=\"#accordionExample\">\r\n                            <div className=\"accordion-body\">\r\n                                <strong>This is the first item's accordion body.</strong> It is shown by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"accordion-item\" style={mystyle}>\r\n                        <h2 className=\"accordion-header\" id=\"headingTwo\">\r\n                            <button className=\"accordion-button collapsed\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseTwo\" aria-expanded=\"false\" aria-controls=\"collapseTwo\">\r\n                                Accordion Item #2\r\n                            </button>\r\n                        </h2>\r\n                        <div id=\"collapseTwo\" className=\"accordion-collapse collapse\" aria-labelledby=\"headingTwo\" data-bs-parent=\"#accordionExample\">\r\n                            <div className=\"accordion-body\">\r\n                                <strong>This is the second item's accordion body.</strong> It is hidden by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"accordion-item\" style={mystyle}>\r\n                        <h2 className=\"accordion-header\" id=\"headingThree\">\r\n                            <button className=\"accordion-button collapsed\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseThree\" aria-expanded=\"false\" aria-controls=\"collapseThree\">\r\n                                Accordion Item #3\r\n                            </button>\r\n                        </h2>\r\n                        <div id=\"collapseThree\" className=\"accordion-collapse collapse\" aria-labelledby=\"headingThree\" data-bs-parent=\"#accordionExample\">\r\n                            <div className=\"accordion-body\">\r\n                                <strong>This is the third item's accordion body.</strong> It is hidden by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div className=\"container\">\r\n                <button className=\"btn btn-success my-3\" onClick={changeStyle} >{btnText}</button>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n","import React from 'react'\r\n\r\nimport {Link} from 'react-router-dom'\r\n\r\n\r\n\r\nexport default function Navbar(props) {\r\n  return (\r\n    <>\r\n      <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\r\n        <div className=\"container-fluid\">\r\n          <Link className=\"navbar-brand\" to=\"/\">{props.title}</Link>\r\n          <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n            <span className=\"navbar-toggler-icon\"></span>\r\n          </button>\r\n          <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n            <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n              <li className=\"nav-item\">\r\n                <Link className=\"nav-link active\" aria-current=\"page\" to=\"/\">Home</Link>\r\n              </li>\r\n              <li className=\"nav-item\">\r\n                <Link className=\"nav-link\" to=\"./About\">AboutTextConverter</Link>\r\n              </li>\r\n            </ul>\r\n            <div className={`form-check form-switch text-${props.mode === 'light'?'dark':'light'}`}>\r\n              <input className=\"form-check-input\" onClick={props.changeTheme} type=\"checkbox\" id=\"flexSwitchCheckDefault\" />\r\n              <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">{` Enable ${props.mode === 'light'?'dark':'light'} mode` }</label>\r\n            </div>\r\n\r\n\r\n          </div>\r\n        </div>\r\n      </nav>\r\n    </>\r\n\r\n  )\r\n}","import React, { useState } from 'react'\r\n\r\nexport default function TextForm(props) {\r\n\r\n    const upperCaseClick = () => {\r\n\r\n        let newText = text.toUpperCase();\r\n        setText(newText);\r\n    }\r\n    const lowerCaseClick = () => {\r\n\r\n        let newText = text.toLowerCase();\r\n        setText(newText);\r\n    }\r\n    \r\n    const handleCopy = () => {\r\n\r\n        var text = document.getElementById(\"mybox\");\r\n        text.select();\r\n        navigator.clipboard.writeText(text.value);\r\n\r\n\r\n    }\r\n    const removeEmoji =()=> {\r\n        let newText = document.getElementById('mybox');\r\n        newText = text.replace(/([\\u2700-\\u27BF]|[\\uE000-\\uF8FF]|\\uD83C[\\uDC00-\\uDFFF]|\\uD83D[\\uDC00-\\uDFFF]|[\\u2011-\\u26FF]|\\uD83E[\\uDD10-\\uDDFF])/g, '');\r\n          setText(newText);\r\n    }\r\n\r\n    const removeExtraSpaces=()=>{\r\n        let newText = document.getElementById('mybox');\r\n           newText = text.replace(/\\s+/g, \" \");\r\n           setText(newText)\r\n    }\r\n    \r\n    const ClearText =()=>{\r\n     let newText= document.getElementById('mybox').value = \"\";\r\n     setText(newText)\r\n    }\r\n\r\n    const handleOnChange = (event) => {\r\n        setText(event.target.value);\r\n    }\r\n\r\n    const [text, setText] = useState('');\r\n\r\n    return (\r\n        <>\r\n        \r\n            <div style={{color:props.mode === 'dark'?'white':'black'}}> \r\n                <h3 className=\"my-3\" >{props.heading}</h3>\r\n                <div className=\"mb-3\" >\r\n                    <textarea className=\"form-control\" value={text} onChange={handleOnChange} id=\"mybox\" rows=\"8\" ></textarea>\r\n                </div>\r\n\r\n                <button className=\"btn btn-success mx-2\" onClick={upperCaseClick}>Convert to UpperCase</button>\r\n                <button className=\"btn btn-success mx-2\" onClick={lowerCaseClick}>Convert to LowerCase</button>\r\n                <button className=\"btn btn-success mx-2\" onClick={handleCopy}>Copy Text</button>\r\n                <button className=\"btn btn-success mx-2\" onClick={removeExtraSpaces}>Remove Extra Spaces</button>\r\n                <button className=\"btn btn-success mx-2\" onClick={removeEmoji}>Remove Emojis</button>\r\n                <button className=\"btn btn-success mx-2\" onClick={ClearText}>Clear Text</button>\r\n\r\n            </div>\r\n            <div className=\"conainer\" style={{color:props.mode === 'dark'?'white':'black'}}>\r\n                <h2 className=\"my-3\">{text.split(/\\s+/).filter((element)=>{return element.length!==0}).length} words and {text.length} characters</h2>\r\n                <h3 className=\"my-3\">Preview</h3>\r\n                <p>{text}</p>\r\n            </div>\r\n     \r\n\r\n        </>\r\n\r\n    )\r\n}\r\n","\nimport './App.css';\nimport About from './components/About';\nimport Navbar from './components/Navbar';\nimport TextForm from './components/TextForm';\nimport React, { useState } from 'react'\n\n\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route\n\n} from \"react-router-dom\";\n\n\nfunction App() {\n\n  const [mode, setmode] = useState('light')\n\n  const changeTheme = () => {\n    if (mode === 'light') {\n      setmode('dark')\n      document.body.style.backgroundColor = '#0d1623'\n    }\n\n    else {\n      setmode('light')\n      document.body.style.backgroundColor = 'white'\n    }\n\n  }\n\n  return (\n    <>\n      <Router>\n        <Navbar title=\"TextConverter\" mode={mode} changeTheme={changeTheme} />\n        <div className=\"container my-3 \">\n          <Switch>\n            <Route exact path=\"/about\">\n              <About />\n            </Route>\n\n            <Route exact path=\"/\">\n              <TextForm heading=\"Enter Text for UpperCase and lowerCase\" mode={mode} />\n            </Route>\n          </Switch>\n\n        </div>\n\n\n      </Router>\n\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}